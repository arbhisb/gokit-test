// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/math.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MathRequest struct {
	NumA float32 `protobuf:"fixed32,1,opt,name=numA,proto3" json:"numA,omitempty"`
	NumB float32 `protobuf:"fixed32,2,opt,name=numB,proto3" json:"numB,omitempty"`
}

func (m *MathRequest) Reset()         { *m = MathRequest{} }
func (m *MathRequest) String() string { return proto.CompactTextString(m) }
func (*MathRequest) ProtoMessage()    {}
func (*MathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b0552fdaada30e, []int{0}
}
func (m *MathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathRequest.Merge(m, src)
}
func (m *MathRequest) XXX_Size() int {
	return m.Size()
}
func (m *MathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MathRequest proto.InternalMessageInfo

func (m *MathRequest) GetNumA() float32 {
	if m != nil {
		return m.NumA
	}
	return 0
}

func (m *MathRequest) GetNumB() float32 {
	if m != nil {
		return m.NumB
	}
	return 0
}

type MathResponse struct {
	Result float32 `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MathResponse) Reset()         { *m = MathResponse{} }
func (m *MathResponse) String() string { return proto.CompactTextString(m) }
func (*MathResponse) ProtoMessage()    {}
func (*MathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b0552fdaada30e, []int{1}
}
func (m *MathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathResponse.Merge(m, src)
}
func (m *MathResponse) XXX_Size() int {
	return m.Size()
}
func (m *MathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MathResponse proto.InternalMessageInfo

func (m *MathResponse) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type OtherRequest struct {
	NumA float32 `protobuf:"fixed32,1,opt,name=numA,proto3" json:"numA,omitempty"`
}

func (m *OtherRequest) Reset()         { *m = OtherRequest{} }
func (m *OtherRequest) String() string { return proto.CompactTextString(m) }
func (*OtherRequest) ProtoMessage()    {}
func (*OtherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b0552fdaada30e, []int{2}
}
func (m *OtherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherRequest.Merge(m, src)
}
func (m *OtherRequest) XXX_Size() int {
	return m.Size()
}
func (m *OtherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OtherRequest proto.InternalMessageInfo

func (m *OtherRequest) GetNumA() float32 {
	if m != nil {
		return m.NumA
	}
	return 0
}

type OtherResponse struct {
	Data []*DataDb `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *OtherResponse) Reset()         { *m = OtherResponse{} }
func (m *OtherResponse) String() string { return proto.CompactTextString(m) }
func (*OtherResponse) ProtoMessage()    {}
func (*OtherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b0552fdaada30e, []int{3}
}
func (m *OtherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OtherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OtherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OtherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherResponse.Merge(m, src)
}
func (m *OtherResponse) XXX_Size() int {
	return m.Size()
}
func (m *OtherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OtherResponse proto.InternalMessageInfo

func (m *OtherResponse) GetData() []*DataDb {
	if m != nil {
		return m.Data
	}
	return nil
}

type DataDb struct {
	Id      string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OfferId string `protobuf:"bytes,2,opt,name=Offer_id,json=OfferId,proto3" json:"Offer_id,omitempty"`
	QuoteId string `protobuf:"bytes,3,opt,name=Quote_id,json=QuoteId,proto3" json:"Quote_id,omitempty"`
}

func (m *DataDb) Reset()         { *m = DataDb{} }
func (m *DataDb) String() string { return proto.CompactTextString(m) }
func (*DataDb) ProtoMessage()    {}
func (*DataDb) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b0552fdaada30e, []int{4}
}
func (m *DataDb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDb.Merge(m, src)
}
func (m *DataDb) XXX_Size() int {
	return m.Size()
}
func (m *DataDb) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDb.DiscardUnknown(m)
}

var xxx_messageInfo_DataDb proto.InternalMessageInfo

func (m *DataDb) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataDb) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

func (m *DataDb) GetQuoteId() string {
	if m != nil {
		return m.QuoteId
	}
	return ""
}

func init() {
	proto.RegisterType((*MathRequest)(nil), "MathRequest")
	proto.RegisterType((*MathResponse)(nil), "MathResponse")
	proto.RegisterType((*OtherRequest)(nil), "OtherRequest")
	proto.RegisterType((*OtherResponse)(nil), "OtherResponse")
	proto.RegisterType((*DataDb)(nil), "DataDb")
}

func init() { proto.RegisterFile("pb/math.proto", fileDescriptor_b4b0552fdaada30e) }

var fileDescriptor_b4b0552fdaada30e = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcb, 0x8e, 0xda, 0x30,
	0x18, 0x85, 0x73, 0x41, 0x01, 0xcc, 0x65, 0xe1, 0x45, 0x05, 0x54, 0x8a, 0x90, 0xd5, 0x0b, 0x55,
	0x4b, 0x22, 0x51, 0xf5, 0x01, 0xa0, 0x74, 0xc1, 0x82, 0xa2, 0x86, 0x5d, 0x37, 0x95, 0x13, 0x9b,
	0x24, 0x9d, 0x24, 0xce, 0x38, 0x36, 0x12, 0x6f, 0x31, 0x8f, 0x35, 0x4b, 0x96, 0x33, 0xbb, 0x11,
	0xbc, 0xc8, 0x08, 0x27, 0x1a, 0x31, 0xb3, 0x18, 0x66, 0xe7, 0xef, 0x3f, 0xe7, 0x3f, 0xb2, 0x8f,
	0x0c, 0x3a, 0xb9, 0xef, 0xa6, 0x58, 0x44, 0x4e, 0xce, 0x99, 0x60, 0x83, 0x7e, 0xc8, 0x58, 0x98,
	0x50, 0x57, 0x91, 0x2f, 0x37, 0x2e, 0xce, 0x76, 0xa5, 0x84, 0x7e, 0x80, 0xd6, 0x12, 0x8b, 0xc8,
	0xa3, 0xd7, 0x92, 0x16, 0x02, 0x42, 0x50, 0xcb, 0x64, 0x3a, 0xed, 0xe9, 0x43, 0x7d, 0x64, 0x78,
	0xea, 0x5c, 0xcd, 0x66, 0x3d, 0xe3, 0x69, 0x36, 0x43, 0x9f, 0x40, 0xbb, 0x5c, 0x2b, 0x72, 0x96,
	0x15, 0x14, 0xbe, 0x03, 0x16, 0xa7, 0x85, 0x4c, 0x44, 0xb5, 0x59, 0x11, 0x42, 0xa0, 0xbd, 0x12,
	0x11, 0xe5, 0xaf, 0xe4, 0xa3, 0x6f, 0xa0, 0x53, 0x79, 0xaa, 0xb0, 0xf7, 0xa0, 0x36, 0xc7, 0x02,
	0xf7, 0xf4, 0xa1, 0x39, 0x6a, 0x4d, 0xea, 0xce, 0x09, 0xe6, 0xbe, 0xa7, 0x86, 0xe8, 0x37, 0xb0,
	0x4a, 0x86, 0x5d, 0x60, 0x2c, 0x88, 0x4a, 0x6a, 0x7a, 0xc6, 0x82, 0xc0, 0x3e, 0x68, 0xac, 0x36,
	0x1b, 0xca, 0xff, 0xc5, 0x44, 0xdd, 0xb5, 0xe9, 0xd5, 0x15, 0x97, 0xd2, 0x1f, 0xc9, 0x04, 0x3d,
	0x49, 0x66, 0x29, 0x29, 0x5e, 0x90, 0xc9, 0xbd, 0x5e, 0x36, 0xb0, 0xa6, 0x7c, 0x1b, 0x07, 0x14,
	0x7e, 0x00, 0xe6, 0x94, 0x10, 0xd8, 0x76, 0xce, 0x6a, 0x19, 0x74, 0x9c, 0xf3, 0xd7, 0x22, 0x0d,
	0x7e, 0x01, 0x8d, 0xb5, 0xf4, 0x05, 0xc7, 0x81, 0x78, 0x83, 0x75, 0x29, 0x13, 0x11, 0xe7, 0xc9,
	0xee, 0x92, 0xf5, 0x33, 0xb0, 0xe6, 0xf1, 0x36, 0x26, 0xf4, 0x92, 0xf1, 0x23, 0x30, 0x7f, 0x12,
	0xfc, 0xc2, 0xd5, 0x75, 0x9e, 0xd5, 0x88, 0xb4, 0xd9, 0xaf, 0xdb, 0x83, 0xad, 0xef, 0x0f, 0xb6,
	0xfe, 0x70, 0xb0, 0xf5, 0x9b, 0xa3, 0xad, 0xed, 0x8f, 0xb6, 0x76, 0x77, 0xb4, 0xb5, 0xbf, 0x5f,
	0xc3, 0x58, 0x44, 0xd2, 0x77, 0x02, 0x96, 0xba, 0xff, 0x65, 0x46, 0x39, 0xdd, 0x05, 0xb8, 0x90,
	0x21, 0x76, 0x43, 0x76, 0x15, 0x8b, 0x71, 0xc8, 0xf3, 0x60, 0x4c, 0x68, 0xca, 0xdc, 0xdc, 0xf7,
	0x2d, 0xf5, 0x55, 0xbe, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xff, 0xe4, 0x67, 0x56, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MathServiceClient is the client API for MathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathServiceClient interface {
	Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Subtract(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Multiply(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Divide(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Cda(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*OtherResponse, error)
}

type mathServiceClient struct {
	cc *grpc.ClientConn
}

func NewMathServiceClient(cc *grpc.ClientConn) MathServiceClient {
	return &mathServiceClient{cc}
}

func (c *mathServiceClient) Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/MathService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Subtract(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/MathService/Subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Multiply(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/MathService/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Divide(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, "/MathService/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Cda(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*OtherResponse, error) {
	out := new(OtherResponse)
	err := c.cc.Invoke(ctx, "/MathService/Cda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServiceServer is the server API for MathService service.
type MathServiceServer interface {
	Add(context.Context, *MathRequest) (*MathResponse, error)
	Subtract(context.Context, *MathRequest) (*MathResponse, error)
	Multiply(context.Context, *MathRequest) (*MathResponse, error)
	Divide(context.Context, *MathRequest) (*MathResponse, error)
	Cda(context.Context, *MathRequest) (*OtherResponse, error)
}

// UnimplementedMathServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMathServiceServer struct {
}

func (*UnimplementedMathServiceServer) Add(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedMathServiceServer) Subtract(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (*UnimplementedMathServiceServer) Multiply(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedMathServiceServer) Divide(ctx context.Context, req *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (*UnimplementedMathServiceServer) Cda(ctx context.Context, req *MathRequest) (*OtherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cda not implemented")
}

func RegisterMathServiceServer(s *grpc.Server, srv MathServiceServer) {
	s.RegisterService(&_MathService_serviceDesc, srv)
}

func _MathService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Add(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathService/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Subtract(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Multiply(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathService/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Divide(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Cda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Cda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathService/Cda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Cda(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MathService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MathService",
	HandlerType: (*MathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MathService_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _MathService_Subtract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _MathService_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _MathService_Divide_Handler,
		},
		{
			MethodName: "Cda",
			Handler:    _MathService_Cda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/math.proto",
}

func (m *MathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumB != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NumB))))
		i--
		dAtA[i] = 0x15
	}
	if m.NumA != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NumA))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Result))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *OtherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumA != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NumA))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *OtherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OtherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMath(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataDb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteId) > 0 {
		i -= len(m.QuoteId)
		copy(dAtA[i:], m.QuoteId)
		i = encodeVarintMath(dAtA, i, uint64(len(m.QuoteId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintMath(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMath(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMath(dAtA []byte, offset int, v uint64) int {
	offset -= sovMath(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumA != 0 {
		n += 5
	}
	if m.NumB != 0 {
		n += 5
	}
	return n
}

func (m *MathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 5
	}
	return n
}

func (m *OtherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumA != 0 {
		n += 5
	}
	return n
}

func (m *OtherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovMath(uint64(l))
		}
	}
	return n
}

func (m *DataDb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMath(uint64(l))
	}
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovMath(uint64(l))
	}
	l = len(m.QuoteId)
	if l > 0 {
		n += 1 + l + sovMath(uint64(l))
	}
	return n
}

func sovMath(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMath(x uint64) (n int) {
	return sovMath(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumA", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NumA = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumB", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NumB = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Result = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumA", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NumA = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMath
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DataDb{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMath(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMath
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMath
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMath
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMath
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMath        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMath          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMath = fmt.Errorf("proto: unexpected end of group")
)
